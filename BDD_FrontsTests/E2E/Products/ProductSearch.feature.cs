// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDD_FrontsTests.E2E.Products
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductSearchFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "ProductSearch.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "E2E/Products", "ProductSearch", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ProductSearch")))
            {
                await global::BDD_FrontsTests.E2E.Products.ProductSearchFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 10
#line hidden
#line 11
 await testRunner.GivenAsync("検索画面を表示するリクエストを送信する \'https://localhost:7066/exercise/product/search\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("検索画面が提供されることを検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductSearch")]
        public async System.Threading.Tasks.Task 検索画面が提供されることを検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("検索画面が提供されることを検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 10
await this.FeatureBackgroundAsync();
#line hidden
#line 15
 await testRunner.WhenAsync("検索画面が表示される", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 16
 await testRunner.ThenAsync("キーワード入力項目と[検索]ボタンが表示されたことを評価する", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("検索結果が正しく表示されることを検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductSearch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PDF")]
        public async System.Threading.Tasks.Task 検索結果が正しく表示されることを検証する()
        {
            string[] tagsOfScenario = new string[] {
                    "PDF"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("検索結果が正しく表示されることを検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 10
await this.FeatureBackgroundAsync();
#line hidden
#line 20
 await testRunner.WhenAsync("キーワードを入力し [検索] ボタンをクリックする \'ボールペン\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "Id",
                            "Name",
                            "Price"});
                table8.AddRow(new string[] {
                            "69af403817e44691b748f6cde073f80c",
                            "水性ボールペン 赤",
                            "150"});
                table8.AddRow(new string[] {
                            "a4e942db87434d4985900ba14593e55f",
                            "水性ボールペン 黒",
                            "150"});
                table8.AddRow(new string[] {
                            "6cb3976468344a71a6a5debe05abc5aa",
                            "水性ボールペン 青",
                            "150"});
                table8.AddRow(new string[] {
                            "fccb979a0d0b4c909a1898ada46fb2b1",
                            "油性ボールペン 赤",
                            "130"});
                table8.AddRow(new string[] {
                            "18d30718efec45cbb644af2cf50c286f",
                            "油性ボールペン 黒",
                            "130"});
                table8.AddRow(new string[] {
                            "f073f7c3f35744ffbbdb3815e1d4b6c2",
                            "油性ボールペン 青",
                            "130"});
#line 21
 await testRunner.ThenAsync("検索結果として以下の内容が表示されたことを評価する", ((string)(null)), table8, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("キーワードを入力せずに[検索]ボタンをクリックした場合、エラーメッセージが表示されることを検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductSearch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PDF")]
        public async System.Threading.Tasks.Task キーワードを入力せずに検索ボタンをクリックした場合エラーメッセージが表示されることを検証する()
        {
            string[] tagsOfScenario = new string[] {
                    "PDF"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("キーワードを入力せずに[検索]ボタンをクリックした場合、エラーメッセージが表示されることを検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 10
await this.FeatureBackgroundAsync();
#line hidden
#line 32
 await testRunner.WhenAsync("キーワードを入力せずに [検索] ボタンをクリックする", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 33
 await testRunner.ThenAsync("エラーメッセージが表示されたことを評価する \'キーワードを入力してください。\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("存在しないキーワードを入力して検索ボタンをクリックした場合、エラーメッセージが表示されることを検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductSearch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PDF")]
        public async System.Threading.Tasks.Task 存在しないキーワードを入力して検索ボタンをクリックした場合エラーメッセージが表示されることを検証する()
        {
            string[] tagsOfScenario = new string[] {
                    "PDF"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("存在しないキーワードを入力して検索ボタンをクリックした場合、エラーメッセージが表示されることを検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 10
await this.FeatureBackgroundAsync();
#line hidden
#line 39
 await testRunner.WhenAsync("キーワードを入力し [検索] ボタンをクリックする \'ゴム\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 40
 await testRunner.ThenAsync("エラーメッセージが表示されたことを評価する \'キーワード:ゴムを含む商品は見つかりませんでした。\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("[終了]ボタンをクリックしたら、メニュー画面に遷移することを検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductSearch")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("PDF")]
        public async System.Threading.Tasks.Task 終了ボタンをクリックしたらメニュー画面に遷移することを検証する()
        {
            string[] tagsOfScenario = new string[] {
                    "PDF"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("[終了]ボタンをクリックしたら、メニュー画面に遷移することを検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 10
await this.FeatureBackgroundAsync();
#line hidden
#line 46
 await testRunner.GivenAsync("テスト対象のページリクエストを送信する \'https://localhost:7066/exercise/product/search\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 47
 await testRunner.WhenAsync("[終了]ボタンをクリックする", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 48
 await testRunner.ThenAsync("メニュー画⾯が表⽰されたことを評価する", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
