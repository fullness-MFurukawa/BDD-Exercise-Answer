// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Exercise.InfrastructuresTests.EntityFrameworkCore.Products
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductDBModelAdapterFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = new string[] {
                "InfraDependency"};
        
#line 1 "ProductDBModelAdapter.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "EntityFrameworkCore/Products", "ProductDBModelAdapter", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "ProductDBModelAdapter")))
            {
                await global::Exercise.InfrastructuresTests.EntityFrameworkCore.Products.ProductDBModelAdapterFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ProductをProductDBModelへの変換を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductDBModelAdapter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InfraDependency")]
        public async System.Threading.Tasks.Task ProductをProductDBModelへの変換を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ProductをProductDBModelへの変換を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 16
 await testRunner.GivenAsync("Categoryを保持したProductを用意する", "{\r\n\t\"Id\": \"69af403817e44691b748f6cde073f80c\",\r\n       \"Name\": \"水性ボールペン 赤\",\r\n\t\"Pri" +
                        "ce\": \"150\",\r\n\t\"CategoryId\":\"40cffd3bf63645c69a875c87ecb6f200\",\r\n\t\"CategoryName\":" +
                        "\"文房具\"\r\n   }", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 26
 await testRunner.WhenAsync("ProductDBModelを生成する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
 await testRunner.ThenAsync("ProductDBModelのプロパティを検証する", "{\r\n\t\"Id\": \"69af403817e44691b748f6cde073f80c\",\r\n       \"Name\": \"水性ボールペン 赤\",\r\n\t\"Pri" +
                        "ce\": \"150\",\r\n\t\"CategoryId\":\"40cffd3bf63645c69a875c87ecb6f200\",\r\n\t\"CategoryName\":" +
                        "\"文房具\"\r\n   }", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Product（Categoryを持たない）をProductDBModelへの変換を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductDBModelAdapter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InfraDependency")]
        public async System.Threading.Tasks.Task ProductCategoryを持たないをProductDBModelへの変換を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Product（Categoryを持たない）をProductDBModelへの変換を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 38
 await testRunner.GivenAsync("Categoryを保持しないProductを用意する", "{\r\n\t\"Id\": \"69af403817e44691b748f6cde073f80c\",\r\n       \"Name\": \"水性ボールペン 赤\",\r\n\t\"Pri" +
                        "ce\": \"150\"\r\n   }", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 46
 await testRunner.WhenAsync("ProductDBModelを生成する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 47
 await testRunner.ThenAsync("CategoryDBModelを持たないProductDBModelのプロパティを検証する", "{\r\n\t\"Id\": \"69af403817e44691b748f6cde073f80c\",\r\n       \"Name\": \"水性ボールペン 赤\",\r\n\t\"Pri" +
                        "ce\": \"150\"\r\n   }", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ProductDBModelからProductを復元できることを検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductDBModelAdapter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InfraDependency")]
        public async System.Threading.Tasks.Task ProductDBModelからProductを復元できることを検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ProductDBModelからProductを復元できることを検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 59
 await testRunner.GivenAsync("ProductDBModelを用意する", "{\r\n\t\"Id\": \"69af403817e44691b748f6cde073f80c\",\r\n       \"Name\": \"水性ボールペン 赤\",\r\n\t\"Pri" +
                        "ce\": \"150\",\r\n\t\"CategoryId\":\"40cffd3bf63645c69a875c87ecb6f200\",\r\n\t\"CategoryName\":" +
                        "\"文房具\"\r\n   }", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 69
 await testRunner.WhenAsync("Productを復元する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 70
 await testRunner.ThenAsync("Productのプロパティを評価する", "{\r\n\t\"Id\": \"69af403817e44691b748f6cde073f80c\",\r\n       \"Name\": \"水性ボールペン 赤\",\r\n\t\"Pri" +
                        "ce\": \"150\",\r\n\t\"CategoryId\":\"40cffd3bf63645c69a875c87ecb6f200\",\r\n\t\"CategoryName\":" +
                        "\"文房具\"\r\n   }", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ProductDBModelからProduct（Categoryを持たない)を復元できることを検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductDBModelAdapter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InfraDependency")]
        public async System.Threading.Tasks.Task ProductDBModelからProductCategoryを持たないを復元できることを検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ProductDBModelからProduct（Categoryを持たない)を復元できることを検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 81
 await testRunner.GivenAsync("CategoryDBModelを保持しないProductDBModelを用意する", "{\r\n\t\"Id\": \"69af403817e44691b748f6cde073f80c\",\r\n       \"Name\": \"水性ボールペン 赤\",\r\n\t\"Pri" +
                        "ce\": \"150\"\r\n   }", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 89
 await testRunner.WhenAsync("Productを復元する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 90
 await testRunner.ThenAsync("Categoryを持たないProductのプロパティを評価する", "{\r\n\t\"Id\": \"69af403817e44691b748f6cde073f80c\",\r\n       \"Name\": \"水性ボールペン 赤\",\r\n\t\"Pri" +
                        "ce\": \"150\"\r\n   }", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ProductのリストをProductDBModelのリストへの変換を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductDBModelAdapter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InfraDependency")]
        public async System.Threading.Tasks.Task ProductのリストをProductDBModelのリストへの変換を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ProductのリストをProductDBModelのリストへの変換を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 101
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 102
 await testRunner.GivenAsync("Categoryを保持したProductのリストを用意する", @"[
	{
		""Id"": ""69af403817e44691b748f6cde073f80c"",
		""Name"": ""水性ボールペン 赤"",
		""Price"": ""150"",
		""CategoryId"":""40cffd3bf63645c69a875c87ecb6f200"",
		""CategoryName"":""文房具""
	},
	{
		""Id"": ""a4e942db87434d4985900ba14593e55f"",
		""Name"": ""水性ボールペン 黒"",
		""Price"": ""150"",
		""CategoryId"":""40cffd3bf63645c69a875c87ecb6f200"",
		""CategoryName"":""文房具""
	},
	{
		""Id"": ""6cb3976468344a71a6a5debe05abc5aa"",
		""Name"": ""水性ボールペン 青"",
		""Price"": ""150"",
		""CategoryId"":""40cffd3bf63645c69a875c87ecb6f200"",
		""CategoryName"":""文房具""
	}
]", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 128
 await testRunner.WhenAsync("ProductのリストをProductDBModelのリストに変換する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 129
 await testRunner.ThenAsync("リスト内のProductDBModelのプロパティを評価する", @"[
	{
		""Id"": ""69af403817e44691b748f6cde073f80c"",
		""Name"": ""水性ボールペン 赤"",
		""Price"": ""150"",
		""CategoryId"":""40cffd3bf63645c69a875c87ecb6f200"",
		""CategoryName"":""文房具""
	},
	{
		""Id"": ""a4e942db87434d4985900ba14593e55f"",
		""Name"": ""水性ボールペン 黒"",
		""Price"": ""150"",
		""CategoryId"":""40cffd3bf63645c69a875c87ecb6f200"",
		""CategoryName"":""文房具""
	},
	{
		""Id"": ""6cb3976468344a71a6a5debe05abc5aa"",
		""Name"": ""水性ボールペン 青"",
		""Price"": ""150"",
		""CategoryId"":""40cffd3bf63645c69a875c87ecb6f200"",
		""CategoryName"":""文房具""
	}
]", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ドメインProduct（Categoryを持たない）のリストをProductDBModelのリストへの変換を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductDBModelAdapter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InfraDependency")]
        public async System.Threading.Tasks.Task ドメインProductCategoryを持たないのリストをProductDBModelのリストへの変換を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ドメインProduct（Categoryを持たない）のリストをProductDBModelのリストへの変換を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 155
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 156
 await testRunner.GivenAsync("Categoryを保持しないProductのリストを用意する", @"[
	{
		""Id"": ""69af403817e44691b748f6cde073f80c"",
		""Name"": ""水性ボールペン 赤"",
		""Price"": ""150""
	},
	{
		""Id"": ""a4e942db87434d4985900ba14593e55f"",
		""Name"": ""水性ボールペン 黒"",
		""Price"": ""150""
	},
	{
		""Id"": ""6cb3976468344a71a6a5debe05abc5aa"",
		""Name"": ""水性ボールペン 青"",
		""Price"": ""150""
	}
]", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 176
 await testRunner.WhenAsync("ProductのリストをProductDBModelのリストに変換する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 177
 await testRunner.ThenAsync("リスト内のCategoryDBModelを持たないProductDBModelのプロパティを評価する", @"[
	{
		""Id"": ""69af403817e44691b748f6cde073f80c"",
		""Name"": ""水性ボールペン 赤"",
		""Price"": ""150""
	},
	{
		""Id"": ""a4e942db87434d4985900ba14593e55f"",
		""Name"": ""水性ボールペン 黒"",
		""Price"": ""150""
	},
	{
		""Id"": ""6cb3976468344a71a6a5debe05abc5aa"",
		""Name"": ""水性ボールペン 青"",
		""Price"": ""150""
	}
]", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ProductDBModelのリストからProductのリストへの復元を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductDBModelAdapter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InfraDependency")]
        public async System.Threading.Tasks.Task ProductDBModelのリストからProductのリストへの復元を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ProductDBModelのリストからProductのリストへの復元を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 201
 await testRunner.GivenAsync("CategoryDBModelを保持したProductDBModelのリストを用意する", @"[
	{
		""Id"": ""69af403817e44691b748f6cde073f80c"",
		""Name"": ""水性ボールペン 赤"",
		""Price"": ""150"",
		""CategoryId"":""40cffd3bf63645c69a875c87ecb6f200"",
		""CategoryName"":""文房具""
	},
	{
		""Id"": ""a4e942db87434d4985900ba14593e55f"",
		""Name"": ""水性ボールペン 黒"",
		""Price"": ""150"",
		""CategoryId"":""40cffd3bf63645c69a875c87ecb6f200"",
		""CategoryName"":""文房具""
	},
	{
		""Id"": ""6cb3976468344a71a6a5debe05abc5aa"",
		""Name"": ""水性ボールペン 青"",
		""Price"": ""150"",
		""CategoryId"":""40cffd3bf63645c69a875c87ecb6f200"",
		""CategoryName"":""文房具""
	}
]", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 227
 await testRunner.WhenAsync("ProductDBModelのリストからProductのリストを復元する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 228
 await testRunner.ThenAsync("リスト内のドメインモデルProductのプロパティを評価する", @"[
	{
		""Id"": ""69af403817e44691b748f6cde073f80c"",
		""Name"": ""水性ボールペン 赤"",
		""Price"": ""150"",
		""CategoryId"":""40cffd3bf63645c69a875c87ecb6f200"",
		""CategoryName"":""文房具""
	},
	{
		""Id"": ""a4e942db87434d4985900ba14593e55f"",
		""Name"": ""水性ボールペン 黒"",
		""Price"": ""150"",
		""CategoryId"":""40cffd3bf63645c69a875c87ecb6f200"",
		""CategoryName"":""文房具""
	},
	{
		""Id"": ""6cb3976468344a71a6a5debe05abc5aa"",
		""Name"": ""水性ボールペン 青"",
		""Price"": ""150"",
		""CategoryId"":""40cffd3bf63645c69a875c87ecb6f200"",
		""CategoryName"":""文房具""
	}
]", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ProductDBModelのリスト（CategoryDBModelを持たない）からProductのリストへの復元を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "ProductDBModelAdapter")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("InfraDependency")]
        public async System.Threading.Tasks.Task ProductDBModelのリストCategoryDBModelを持たないからProductのリストへの復元を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ProductDBModelのリスト（CategoryDBModelを持たない）からProductのリストへの復元を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 254
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 255
 await testRunner.GivenAsync("CategoryDBModelを保持しないProductDBModelのリストを用意する", @"[
	{
		""Id"": ""69af403817e44691b748f6cde073f80c"",
		""Name"": ""水性ボールペン 赤"",
		""Price"": ""150""
	},
	{
		""Id"": ""a4e942db87434d4985900ba14593e55f"",
		""Name"": ""水性ボールペン 黒"",
		""Price"": ""150""
	},
	{
		""Id"": ""6cb3976468344a71a6a5debe05abc5aa"",
		""Name"": ""水性ボールペン 青"",
		""Price"": ""150""
	}
]", ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 275
 await testRunner.WhenAsync("ProductDBModelのリストからProductのリストを復元する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 276
 await testRunner.ThenAsync("リスト内のCategoryを持たないProductのプロパティを評価する", @"[
	{
		""Id"": ""69af403817e44691b748f6cde073f80c"",
		""Name"": ""水性ボールペン 赤"",
		""Price"": ""150""
	},
	{
		""Id"": ""a4e942db87434d4985900ba14593e55f"",
		""Name"": ""水性ボールペン 黒"",
		""Price"": ""150""
	},
	{
		""Id"": ""6cb3976468344a71a6a5debe05abc5aa"",
		""Name"": ""水性ボールペン 青"",
		""Price"": ""150""
	}
]", ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
