// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Exercise.DomainsTests.Models.Products
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ProductFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Product.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Models/Products", "Product", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Product")))
            {
                await global::Exercise.DomainsTests.Models.Products.ProductFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("新しい商品の生成を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Product")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("消しゴム", "130", "40cffd3bf63645c69a875c87ecb6f200", "文房具", null)]
        public async System.Threading.Tasks.Task 新しい商品の生成を検証する(string name, string price, string category_Id, string category_Name, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("price", price);
            argumentsOfScenario.Add("category_id", category_Id);
            argumentsOfScenario.Add("category_name", category_Name);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("新しい商品の生成を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table19 = new global::Reqnroll.Table(new string[] {
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table19.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", price),
                            string.Format("{0}", category_Id),
                            string.Format("{0}", category_Name)});
#line 10
 await testRunner.GivenAsync("新しい商品名、単価、カテゴリを用意する", ((string)(null)), table19, "Given ");
#line hidden
#line 13
 await testRunner.WhenAsync("新しいProductを生成する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table20 = new global::Reqnroll.Table(new string[] {
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table20.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", price),
                            string.Format("{0}", category_Id),
                            string.Format("{0}", category_Name)});
#line 14
 await testRunner.ThenAsync("新しい商品Idを持った商品が生成されていることを評価する", ((string)(null)), table20, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("商品名をnullで新しい商品の生成を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Product")]
        public async System.Threading.Tasks.Task 商品名をNullで新しい商品の生成を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("商品名をnullで新しい商品の生成を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table21 = new global::Reqnroll.Table(new string[] {
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table21.AddRow(new string[] {
                            "null",
                            "130",
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 21
 await testRunner.GivenAsync("新しい商品名、単価、カテゴリを用意する", ((string)(null)), table21, "Given ");
#line hidden
#line 24
 await testRunner.WhenAsync("新しいProductを生成する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 25
 await testRunner.ThenAsync("ValidateExceptionがスローされる \'ProductNameは必須です。\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("商品単価をnullで新しい商品の生成を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Product")]
        public async System.Threading.Tasks.Task 商品単価をNullで新しい商品の生成を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("商品単価をnullで新しい商品の生成を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 26
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table22 = new global::Reqnroll.Table(new string[] {
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table22.AddRow(new string[] {
                            "消しゴム",
                            "null",
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 27
 await testRunner.GivenAsync("新しい商品名、単価、カテゴリを用意する", ((string)(null)), table22, "Given ");
#line hidden
#line 30
 await testRunner.WhenAsync("新しいProductを生成する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
 await testRunner.ThenAsync("ValidateExceptionがスローされる \'ProductPriceは必須です。\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("既存商品の生成を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Product")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("a4e942db87434d4985900ba14593e55f", "水性ボールペン 赤", "150", "40cffd3bf63645c69a875c87ecb6f200", "文房具", null)]
        public async System.Threading.Tasks.Task 既存商品の生成を検証する(string id, string name, string price, string category_Id, string category_Name, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("price", price);
            argumentsOfScenario.Add("category_id", category_Id);
            argumentsOfScenario.Add("category_name", category_Name);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("既存商品の生成を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table23 = new global::Reqnroll.Table(new string[] {
                            "id",
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table23.AddRow(new string[] {
                            string.Format("{0}", id),
                            string.Format("{0}", name),
                            string.Format("{0}", price),
                            string.Format("{0}", category_Id),
                            string.Format("{0}", category_Name)});
#line 34
 await testRunner.GivenAsync("既存商品のId、商品名、単価、カテゴリを用意する", ((string)(null)), table23, "Given ");
#line hidden
#line 37
 await testRunner.WhenAsync("既存の商品を生成する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table24 = new global::Reqnroll.Table(new string[] {
                            "id",
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table24.AddRow(new string[] {
                            string.Format("{0}", id),
                            string.Format("{0}", name),
                            string.Format("{0}", price),
                            string.Format("{0}", category_Id),
                            string.Format("{0}", category_Name)});
#line 38
 await testRunner.ThenAsync("商品ID、商品名、単価、カテゴリは以下と等価であることを評価する", ((string)(null)), table24, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("商品IDをnullで既存商品の生成を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Product")]
        public async System.Threading.Tasks.Task 商品IDをNullで既存商品の生成を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("商品IDをnullで既存商品の生成を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table25 = new global::Reqnroll.Table(new string[] {
                            "id",
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table25.AddRow(new string[] {
                            "null",
                            "水性ボールペン 赤",
                            "150",
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 45
 await testRunner.GivenAsync("既存商品のId、商品名、単価、カテゴリを用意する", ((string)(null)), table25, "Given ");
#line hidden
#line 48
 await testRunner.WhenAsync("既存の商品を生成する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 49
 await testRunner.ThenAsync("ValidateExceptionがスローされる \'ProductIdは必須です。\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("新しい商品を生成し、商品名変更を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Product")]
        public async System.Threading.Tasks.Task 新しい商品を生成し商品名変更を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("新しい商品を生成し、商品名変更を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table26 = new global::Reqnroll.Table(new string[] {
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table26.AddRow(new string[] {
                            "消しゴム",
                            "130",
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 54
  await testRunner.GivenAsync("新しい商品名、単価、カテゴリを用意する", ((string)(null)), table26, "Given ");
#line hidden
#line 61
  await testRunner.WhenAsync("商品名を変更する \'砂消しゴム\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 62
  await testRunner.ThenAsync("商品名が変更されていることを検証する \'砂消しゴム\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("新しい商品を生成し、商品名をnullで変更を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Product")]
        public async System.Threading.Tasks.Task 新しい商品を生成し商品名をNullで変更を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("新しい商品を生成し、商品名をnullで変更を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table27 = new global::Reqnroll.Table(new string[] {
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table27.AddRow(new string[] {
                            "消しゴム",
                            "130",
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 54
  await testRunner.GivenAsync("新しい商品名、単価、カテゴリを用意する", ((string)(null)), table27, "Given ");
#line hidden
#line 64
  await testRunner.WhenAsync("商品名を変更する \'null\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 65
  await testRunner.ThenAsync("ValidateExceptionがスローされる \'ProductNameは必須です。\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("新しい商品を生成し、商品単価変更を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Product")]
        public async System.Threading.Tasks.Task 新しい商品を生成し商品単価変更を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("新しい商品を生成し、商品単価変更を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table28 = new global::Reqnroll.Table(new string[] {
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table28.AddRow(new string[] {
                            "消しゴム",
                            "130",
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 54
  await testRunner.GivenAsync("新しい商品名、単価、カテゴリを用意する", ((string)(null)), table28, "Given ");
#line hidden
#line 70
  await testRunner.WhenAsync("商品単価を変更する \'140\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 71
  await testRunner.ThenAsync("商品単価が変更されていることを検証する \'140\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("新しい商品を生成し、商品単価をnullで変更を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Product")]
        public async System.Threading.Tasks.Task 新しい商品を生成し商品単価をNullで変更を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("新しい商品を生成し、商品単価をnullで変更を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 72
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table29 = new global::Reqnroll.Table(new string[] {
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table29.AddRow(new string[] {
                            "消しゴム",
                            "130",
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 54
  await testRunner.GivenAsync("新しい商品名、単価、カテゴリを用意する", ((string)(null)), table29, "Given ");
#line hidden
#line 73
  await testRunner.WhenAsync("商品単価を変更する \'null\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 74
  await testRunner.ThenAsync("ValidateExceptionがスローされる \'ProductPriceは必須です。\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ProductのEqualsメソッド()を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Product")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("522486256c9948ffbe9f344ac7e8aaab", "消しゴム", "120", "522486256c9948ffbe9f344ac7e8aaab", "消しゴム", "120", "true", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("522486256c9948ffbe9f344ac7e8aaab", "消しゴム", "120", "522486256c9948ffbe9f344ac7e8aaac", "鉛筆", "100", "false", null)]
        public async System.Threading.Tasks.Task ProductのEqualsメソッドを検証する(string id1, string name1, string price1, string id2, string name2, string price2, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id1", id1);
            argumentsOfScenario.Add("name1", name1);
            argumentsOfScenario.Add("price1", price1);
            argumentsOfScenario.Add("id2", id2);
            argumentsOfScenario.Add("name2", name2);
            argumentsOfScenario.Add("price2", price2);
            argumentsOfScenario.Add("result", result);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ProductのEqualsメソッド()を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 79
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table30 = new global::Reqnroll.Table(new string[] {
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table30.AddRow(new string[] {
                            "消しゴム",
                            "130",
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 54
  await testRunner.GivenAsync("新しい商品名、単価、カテゴリを用意する", ((string)(null)), table30, "Given ");
#line hidden
                global::Reqnroll.Table table31 = new global::Reqnroll.Table(new string[] {
                            "id1",
                            "name1",
                            "price1",
                            "id2",
                            "name2",
                            "price2"});
                table31.AddRow(new string[] {
                            string.Format("{0}", id1),
                            string.Format("{0}", name1),
                            string.Format("{0}", price1),
                            string.Format("{0}", id2),
                            string.Format("{0}", name2),
                            string.Format("{0}", price2)});
#line 80
 await testRunner.GivenAsync("比較対象の商品を用意する", ((string)(null)), table31, "Given ");
#line hidden
#line 83
 await testRunner.WhenAsync("Equalsメソッドを実行する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 84
 await testRunner.AndAsync("object型でEqualsメソッドを実行する", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table32 = new global::Reqnroll.Table(new string[] {
                            "result"});
                table32.AddRow(new string[] {
                            string.Format("{0}", result)});
#line 85
 await testRunner.ThenAsync("Equalsメソッド実行結果を評価する", ((string)(null)), table32, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("ProductのGetHashCode()メソッドを検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Product")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("522486256c9948ffbe9f344ac7e8aaab", "消しゴム", "120", "522486256c9948ffbe9f344ac7e8aaab", "消しゴム", "120", "true", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("522486256c9948ffbe9f344ac7e8aaab", "消しゴム", "120", "522486256c9948ffbe9f344ac7e8aaac", "鉛筆", "100", "false", null)]
        public async System.Threading.Tasks.Task ProductのGetHashCodeメソッドを検証する(string id1, string name1, string price1, string id2, string name2, string price2, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id1", id1);
            argumentsOfScenario.Add("name1", name1);
            argumentsOfScenario.Add("price1", price1);
            argumentsOfScenario.Add("id2", id2);
            argumentsOfScenario.Add("name2", name2);
            argumentsOfScenario.Add("price2", price2);
            argumentsOfScenario.Add("result", result);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("ProductのGetHashCode()メソッドを検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table33 = new global::Reqnroll.Table(new string[] {
                            "name",
                            "price",
                            "category_id",
                            "category_name"});
                table33.AddRow(new string[] {
                            "消しゴム",
                            "130",
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 54
  await testRunner.GivenAsync("新しい商品名、単価、カテゴリを用意する", ((string)(null)), table33, "Given ");
#line hidden
                global::Reqnroll.Table table34 = new global::Reqnroll.Table(new string[] {
                            "id1",
                            "name1",
                            "price1",
                            "id2",
                            "name2",
                            "price2"});
                table34.AddRow(new string[] {
                            string.Format("{0}", id1),
                            string.Format("{0}", name1),
                            string.Format("{0}", price1),
                            string.Format("{0}", id2),
                            string.Format("{0}", name2),
                            string.Format("{0}", price2)});
#line 97
    await testRunner.GivenAsync("ハッシュ値を生成する商品を用意する", ((string)(null)), table34, "Given ");
#line hidden
#line 100
    await testRunner.WhenAsync("GetHashCodeメソッドを実行する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table35 = new global::Reqnroll.Table(new string[] {
                            "result"});
                table35.AddRow(new string[] {
                            string.Format("{0}", result)});
#line 101
    await testRunner.ThenAsync("GetHashCodeメソッド実行結果の比較結果を評価する", ((string)(null)), table35, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
