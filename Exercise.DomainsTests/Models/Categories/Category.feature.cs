// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Exercise.DomainsTests.Models.Categories
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CategoryFeature
    {
        
        private static global::Reqnroll.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Category.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly();
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Models/Categories", "Category", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute(Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupBehavior.EndOfClass)]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Category")))
            {
                await global::Exercise.DomainsTests.Models.Categories.CategoryFeature.FeatureSetupAsync(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("新しい商品カテゴリの生成を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Category")]
        public async System.Threading.Tasks.Task 新しい商品カテゴリの生成を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("新しい商品カテゴリの生成を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 10
 await testRunner.GivenAsync("新しい商品カテゴリを用意する \'食品\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 11
 await testRunner.WhenAsync("新しいCategoryを生成する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
 await testRunner.ThenAsync("新しい商品カテゴリIdを持ったカテゴリが生成されていることを評価する \'食品\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("商品カテゴリ名をnullで新しいカテゴリの生成を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Category")]
        public async System.Threading.Tasks.Task 商品カテゴリ名をNullで新しいカテゴリの生成を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("商品カテゴリ名をnullで新しいカテゴリの生成を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 15
 await testRunner.GivenAsync("新しい商品カテゴリを用意する \'null\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 16
 await testRunner.WhenAsync("新しいCategoryを生成する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 17
 await testRunner.ThenAsync("ValidateExceptionがスローされる \'CategoryNameは必須です。\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("既存商品カテゴリの生成を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Category")]
        public async System.Threading.Tasks.Task 既存商品カテゴリの生成を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("既存商品カテゴリの生成を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "id",
                            "name"});
                table1.AddRow(new string[] {
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 20
 await testRunner.GivenAsync("既存商品カテゴリを用意する", ((string)(null)), table1, "Given ");
#line hidden
#line 23
 await testRunner.WhenAsync("既存のCategoryを生成する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "id",
                            "name"});
                table2.AddRow(new string[] {
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 24
 await testRunner.ThenAsync("商品カテゴリIdと商品カテゴリ名は以下と等価であることを評価する", ((string)(null)), table2, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("カテゴリIdをnullで既存カテゴリの生成を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Category")]
        public async System.Threading.Tasks.Task カテゴリIdをNullで既存カテゴリの生成を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("カテゴリIdをnullで既存カテゴリの生成を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "id",
                            "name"});
                table3.AddRow(new string[] {
                            "null",
                            "文房具"});
#line 28
 await testRunner.GivenAsync("既存商品カテゴリを用意する", ((string)(null)), table3, "Given ");
#line hidden
#line 31
 await testRunner.WhenAsync("既存のCategoryを生成する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
 await testRunner.ThenAsync("ValidateExceptionがスローされる \'CategoryIdは必須です。\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("商品カテゴリ名をnullで既存カテゴリの生成を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Category")]
        public async System.Threading.Tasks.Task 商品カテゴリ名をNullで既存カテゴリの生成を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("商品カテゴリ名をnullで既存カテゴリの生成を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "id",
                            "name"});
                table4.AddRow(new string[] {
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "null"});
#line 34
 await testRunner.GivenAsync("既存商品カテゴリを用意する", ((string)(null)), table4, "Given ");
#line hidden
#line 37
 await testRunner.WhenAsync("既存のCategoryを生成する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
 await testRunner.ThenAsync("ValidateExceptionがスローされる \'CategoryNameは必須です。\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("新しい商品カテゴリの生成し、カテゴリ名変更を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Category")]
        public async System.Threading.Tasks.Task 新しい商品カテゴリの生成しカテゴリ名変更を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("新しい商品カテゴリの生成し、カテゴリ名変更を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 44
 await testRunner.GivenAsync("新しい商品カテゴリを用意する \'食品\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 45
 await testRunner.WhenAsync("商品カテゴリ名を変更する \'台所用品\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
 await testRunner.ThenAsync("商品カテゴリ名が変更されていることを検証する \'台所用品\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("新しい商品カテゴリの生成し、カテゴリ名をnullで変更する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Category")]
        public async System.Threading.Tasks.Task 新しい商品カテゴリの生成しカテゴリ名をNullで変更する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("新しい商品カテゴリの生成し、カテゴリ名をnullで変更する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 48
 await testRunner.GivenAsync("新しい商品カテゴリを用意する \'食品\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 49
 await testRunner.WhenAsync("商品カテゴリ名を変更する \'null\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 50
 await testRunner.ThenAsync("ValidateExceptionがスローされる \'CategoryNameは必須です。\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("既存商品カテゴリの生成し、カテゴリ名変更を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Category")]
        public async System.Threading.Tasks.Task 既存商品カテゴリの生成しカテゴリ名変更を検証する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("既存商品カテゴリの生成し、カテゴリ名変更を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "id",
                            "name"});
                table5.AddRow(new string[] {
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 53
 await testRunner.GivenAsync("既存商品カテゴリを用意する", ((string)(null)), table5, "Given ");
#line hidden
#line 56
 await testRunner.WhenAsync("商品カテゴリ名を変更する \'台所用品\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 57
 await testRunner.ThenAsync("商品カテゴリ名が変更されていることを検証する \'台所用品\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("既存商品カテゴリの生成し、カテゴリ名をnullで変更する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Category")]
        public async System.Threading.Tasks.Task 既存商品カテゴリの生成しカテゴリ名をNullで変更する()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("既存商品カテゴリの生成し、カテゴリ名をnullで変更する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "id",
                            "name"});
                table6.AddRow(new string[] {
                            "40cffd3bf63645c69a875c87ecb6f200",
                            "文房具"});
#line 59
 await testRunner.GivenAsync("既存商品カテゴリを用意する", ((string)(null)), table6, "Given ");
#line hidden
#line 62
 await testRunner.WhenAsync("商品カテゴリ名を変更する \'null\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 63
 await testRunner.ThenAsync("ValidateExceptionがスローされる \'CategoryNameは必須です。\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CategoryのEqualsメソッド()を検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Category")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("40cffd3bf63645c69a875c87ecb6f200", "文房具", "40cffd3bf63645c69a875c87ecb6f200", "文房具", "true", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("40cffd3bf63645c69a875c87ecb6f201", "文房具", "40cffd3bf63645c69a875c87ecb6f200", "文房具", "false", null)]
        public async System.Threading.Tasks.Task CategoryのEqualsメソッドを検証する(string id1, string name1, string id2, string name2, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id1", id1);
            argumentsOfScenario.Add("name1", name1);
            argumentsOfScenario.Add("id2", id2);
            argumentsOfScenario.Add("name2", name2);
            argumentsOfScenario.Add("result", result);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("CategoryのEqualsメソッド()を検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 68
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "id1",
                            "name1",
                            "id2",
                            "name2"});
                table7.AddRow(new string[] {
                            string.Format("{0}", id1),
                            string.Format("{0}", name1),
                            string.Format("{0}", id2),
                            string.Format("{0}", name2)});
#line 69
 await testRunner.GivenAsync("比較対象の商品カテゴリを用意する", ((string)(null)), table7, "Given ");
#line hidden
#line 72
 await testRunner.WhenAsync("Equalsメソッドを実行する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 73
 await testRunner.AndAsync("object型でEqualsメソッドを実行する", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "result"});
                table8.AddRow(new string[] {
                            string.Format("{0}", result)});
#line 74
 await testRunner.ThenAsync("Equalsメソッド実行結果を評価する", ((string)(null)), table8, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CategoryのGetHashCode()メソッドを検証する")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Category")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("40cffd3bf63645c69a875c87ecb6f200", "文房具", "40cffd3bf63645c69a875c87ecb6f200", "文房具", "true", null)]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DataRowAttribute("40cffd3bf63645c69a875c87ecb6f201", "文房具", "40cffd3bf63645c69a875c87ecb6f200", "文房具", "false", null)]
        public async System.Threading.Tasks.Task CategoryのGetHashCodeメソッドを検証する(string id1, string name1, string id2, string name2, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id1", id1);
            argumentsOfScenario.Add("name1", name1);
            argumentsOfScenario.Add("id2", id2);
            argumentsOfScenario.Add("name2", name2);
            argumentsOfScenario.Add("result", result);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("CategoryのGetHashCode()メソッドを検証する", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 84
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table9 = new global::Reqnroll.Table(new string[] {
                            "id1",
                            "name1",
                            "id2",
                            "name2"});
                table9.AddRow(new string[] {
                            string.Format("{0}", id1),
                            string.Format("{0}", name1),
                            string.Format("{0}", id2),
                            string.Format("{0}", name2)});
#line 85
    await testRunner.GivenAsync("ハッシュ値を生成する商品カテゴリを用意する", ((string)(null)), table9, "Given ");
#line hidden
#line 88
    await testRunner.WhenAsync("GetHashCodeメソッドを実行する", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table10 = new global::Reqnroll.Table(new string[] {
                            "result"});
                table10.AddRow(new string[] {
                            string.Format("{0}", result)});
#line 89
    await testRunner.ThenAsync("GetHashCodeメソッド実行結果の比較結果を評価する", ((string)(null)), table10, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
